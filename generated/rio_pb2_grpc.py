# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import rio_pb2 as rio__pb2


class RioServiceStub(object):
  """
  This is the interface for the "RIO" service, which provides functionality for estimating the uncertainty in the
  predictor's predictions, as well as providing corrected predictions.

  The predictor could be a neural network or other models capable of generating predictions based on inputs.

  For more information see the white paper: https://arxiv.org/abs/1906.00588

  All data passed to RIO-service requests ("normed_train_data", "train_labels", "train_predictions",  normed_test_data,
  and "test_predictions") should be in CSV format.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Train = channel.unary_unary(
        '/rio.RioService/Train',
        request_serializer=rio__pb2.TrainRequest.SerializeToString,
        response_deserializer=rio__pb2.TrainResult.FromString,
        )
    self.Predict = channel.unary_unary(
        '/rio.RioService/Predict',
        request_serializer=rio__pb2.PredictRequest.SerializeToString,
        response_deserializer=rio__pb2.PredictResult.FromString,
        )


class RioServiceServicer(object):
  """
  This is the interface for the "RIO" service, which provides functionality for estimating the uncertainty in the
  predictor's predictions, as well as providing corrected predictions.

  The predictor could be a neural network or other models capable of generating predictions based on inputs.

  For more information see the white paper: https://arxiv.org/abs/1906.00588

  All data passed to RIO-service requests ("normed_train_data", "train_labels", "train_predictions",  normed_test_data,
  and "test_predictions") should be in CSV format.
  """

  def Train(self, request, context):
    """Given training data and original NN prediction, this method returns the hyperparameters of
    the trained model, the model itself, and the training time in seconds.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict(self, request, context):
    """Given the trained GPFlow model, testing data and original NN predictions, this method returns the predicted
    mean and variance, as well as the inference time in seconds.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RioServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Train': grpc.unary_unary_rpc_method_handler(
          servicer.Train,
          request_deserializer=rio__pb2.TrainRequest.FromString,
          response_serializer=rio__pb2.TrainResult.SerializeToString,
      ),
      'Predict': grpc.unary_unary_rpc_method_handler(
          servicer.Predict,
          request_deserializer=rio__pb2.PredictRequest.FromString,
          response_serializer=rio__pb2.PredictResult.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'rio.RioService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
